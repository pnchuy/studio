rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isManagerOrAdmin() {
      // Allow if user is signed in and their role in the 'users' collection is ADMIN or MANAGER.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['ADMIN', 'MANAGER'];
    }

    function isAdmin() {
      // Allow if user is signed in and their role in the 'users' collection is ADMIN.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }

    // Rules for 'books', 'authors', 'genres', 'series' collections
    // Anyone can read. Only admins/managers can write.
    match /{collection}/{doc} where collection in ['books', 'authors', 'genres', 'series'] {
      allow read: if true;
      allow write: if isManagerOrAdmin();
    }
    
    // Rules for 'users' collection
    match /users/{userId} {
      // Anyone can see the public profile of any user.
      allow read: if true;

      // Any authenticated user can create their own user document.
      allow create: if request.auth != null && request.auth.uid == userId;

      // A user can update their own document.
      // A manager can update a member's document.
      // An admin can update anyone's document.
      allow update: if request.auth != null &&
                    (request.auth.uid == userId ||
                    (isAdmin()) ||
                    (isManagerOrAdmin() && resource.data.role == 'MEMBER'));
                    
      // Only admins can delete users.
      allow delete: if isAdmin();
    }
    
    // Rules for system settings
    match /system/{doc} {
        // Only Admins can read or write system settings.
        allow read, write: if isAdmin();
    }
  }
}
