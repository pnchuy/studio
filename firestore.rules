rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isManagerOrAdmin() {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return request.auth != null && (userRole == 'ADMIN' || userRole == 'MANAGER');
    }

    function isAdmin() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }

    // Public data: readable by anyone, writable by managers/admins
    match /{collection}/{docId} where collection in ['books', 'authors', 'genres', 'series'] {
      allow read: if true;
      allow write: if isManagerOrAdmin();
    }

    // System settings: logo is public, but only admins can change it
    match /system/{docId} {
        allow read: if true;
        allow write: if isAdmin();
    }

    // User profiles
    match /users/{userId} {
      // Anyone can create their own user profile (on signup)
      allow create: if request.auth != null && request.auth.uid == userId;

      // Users can read their own profile. Managers/Admins can read any profile.
      allow read: if request.auth != null && (request.auth.uid == userId || isManagerOrAdmin());

      // Users can update their own profile.
      // Managers can update members.
      // Admins can update anyone.
      allow update: if request.auth != null && (
                    (request.auth.uid == userId) ||
                    (isAdmin()) ||
                    (isManagerOrAdmin() && resource.data.role == 'MEMBER')
                  );

      // Only Admins can delete users, but not themselves.
      allow delete: if isAdmin() && request.auth.uid != userId;
    }
  }
}
