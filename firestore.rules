
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /books/{bookId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['ADMIN', 'MANAGER'];
    }

    match /authors/{authorId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['ADMIN', 'MANAGER'];
    }

    match /genres/{genreId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['ADMIN', 'MANAGER'];
    }

    match /series/{seriesId} {
      allow read: if true;
      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['ADMIN', 'MANAGER'];
    }

    match /users/{userId} {
      // Allow admins/managers to list all users for the management UI.
      // Also allow any new authenticated user to query for the *existence* of any user,
      // which is needed during signup to determine if they are the first user.
      // This is safe because it only allows checking for one document.
      allow list: if request.auth != null &&
                 (request.query.limit <= 1 ||
                  get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['ADMIN', 'MANAGER']);

      // Any authenticated user can read any user's profile.
      // This is generally safe as we don't store sensitive info.
      allow read: if request.auth != null;

      // Any authenticated user can create a user document (their own).
      allow create: if request.auth != null;

      // Complex update logic for roles
      allow update: if request.auth != null && (
        // A user can update their own document
        request.auth.uid == userId ||
        // An ADMIN can update any user document
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN' ||
        // A MANAGER can update a MEMBER's document
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'MANAGER' && resource.data.role == 'MEMBER')
      );
    }
  }
}

    