rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isOneOfRoles(roles) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }

    // Books, Authors, Genres, Series: Public read, Admin/Manager write
    match /{collectionName}/{docId} where collectionName in ['books', 'authors', 'genres', 'series'] {
      allow read: if true;
      allow write: if request.auth != null && isOneOfRoles(['ADMIN', 'MANAGER']);
    }

    // Users:
    match /users/{userId} {
      // Allow user to read their own data, or if user is an admin/manager
      allow get: if request.auth != null && (request.auth.uid == userId || isOneOfRoles(['ADMIN', 'MANAGER']));
      // Allow admins/managers to list users
      allow list: if request.auth != null && isOneOfRoles(['ADMIN', 'MANAGER']);
      
      // Allow user to create their own profile (on signup)
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow ADMIN to update any user's role
      // Allow MANAGER to update role of users who are MEMBERs (but not other ADMINs/MANAGERs)
      allow update: if request.auth != null && 
                      (isOneOfRoles(['ADMIN']) || 
                      (isOneOfRoles(['MANAGER']) && resource.data.role == 'MEMBER'));
                      
      // Allow only ADMIN to delete users (and not themselves)
      allow delete: if request.auth != null && isOneOfRoles(['ADMIN']) && request.auth.uid != userId;
    }
  }
}
