rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /books/{bookId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN' || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'MANAGER');
    }
    match /authors/{authorId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN' || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'MANAGER');
    }
    match /genres/{genreId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN' || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'MANAGER');
    }
    match /series/{seriesId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN' || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'MANAGER');
    }
    match /users/{userId} {
      allow read: if request.auth != null;
      // Allow update if user is updating their own document OR if the user is an ADMIN
      allow update: if (request.auth != null && request.auth.uid == userId) || 
                       (request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN');
      // No one should create or delete users directly from the client.
      allow create, delete: if false;
    }
  }
}
