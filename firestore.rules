rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isManagerOrAdmin() {
      return request.auth.uid != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['ADMIN', 'MANAGER'];
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Books, Authors, Genres, Series: Public read, restricted write
    match /{collection}/{docId} where collection in ['books', 'authors', 'genres', 'series'] {
      allow read: if true;
      allow write: if isManagerOrAdmin();
    }

    // Users: Restricted access
    match /users/{userId} {
      // Allow users to create their own profile document.
      // Disallow them from creating a profile for someone else or giving themselves a role.
      allow create: if isOwner(userId) && !("role" in request.resource.data);
      
      // Managers/Admins can read all user profiles. Users can only read their own.
      allow read: if isOwner(userId) || isManagerOrAdmin();
      
      // Users can update their own profile (but not their role).
      // Admins/Managers can only update other users' roles.
      allow update: if (isOwner(userId) && !("role" in request.resource.data)) ||
                       (isManagerOrAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role']));
                       
      // Admins/Managers can delete other users, but not themselves.
      allow delete: if isManagerOrAdmin() && !isOwner(userId);
    }
    
    // Allow checking for username existence during signup
    match /users/{userId} {
      // This is a special rule to allow list queries for username checks, but only if the query is very specific.
      // This allows checking if a username exists without letting users list all other users.
      allow list: if query.limit == 1 && "username" in query.wheres[0];
    }
  }
}
